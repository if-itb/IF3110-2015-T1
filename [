<?php namespace Lyz\View;

class View {
	/* View parameters */
	protected $params = [];

	/* View file */
	protected $files = [];

	public function __construct($templates) {
		if (!is_array($templates)) {
			$templates = [ $templates ];
		}
		foreach ($templates as $template) {
			$view_file =  VIEWS_PATH . strtolower($template) . '.php';
			if (file_exists($view_file)) {
				array_push($this->files, $view_file);
			}
			else {
				throw new \Exception('Template ' . $view_file . ' not found.');
			}	
		}
	}

	public function styles($styles) {
		$styles = '';
		foreach ($styles as $style) {
			$link_tag = '<link rel=\'stylesheet\' href=\'public/css/' . $style . '.css\'>';
			$styles = $styles . $link_tag;
		}
		$this->params['styles'] = $styles;
		return $this;
	}

	public function scripts($scripts) {
		$scripts = '';
		foreach ($scripts as $script) {
			$script_tag = '<script src=\'public/js/' . $script . '.js\'></script>';
			$scripts = $scripts . $script_tag;
		}
		$this->params['scripts'] = $scripts;
		return $this;
	}


	public function params($params = []) {
		if (!empty($params))) {
			if (is_array($params[0])) {
				$this->params = $params;
			}
			else {
				$thi->params = [ $params ];
			}
		}
		return $this;
	}

	public function __toString() {
		ob_start();
		$this->content = '';
		foreach ($this->files as $idx => $file) {
			$params = [];
			foreach ($this->params[$idx] as $key => $value) {
				$params[$key] = $value;
			}
			extract($params);
			include $file;
			$this->content .= ob_get_clean();
		}
		ob_end_clean();

		return $this->content;
	}
}
